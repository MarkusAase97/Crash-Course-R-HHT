---
title: "Grunnleggende R: Variabler, Datatyper og Operasjoner"
---

# R Grunnleggende: Variabler og Datatyper 游빔

I dette kapittelet etablerer vi det fundamentale programmeringsspr친ket. Vi ser p친 hvordan R lagrer informasjon i variabler og hvilke datatyper som finnes. Dette tilsvarer **Python Basics**-konseptene du er kjent med.

## 1. Variabler og Tilordning

En variabel er en navngitt referanse eller peker til en verdi lagret i datamaskinens minne. Variabler lar oss lagre data, gjenbruke dem og manipulere dem gjennom programmet.

### Tilordning (`<-` vs. `=`)

Den viktigste syntaksforskjellen fra programmeringsspr친k som Python er at i R brukes **pil-operatoren** (`<-`) for 친 tilordne en verdi til en variabel.

| Operator | Funksjon | Anbefaling |
|:-----------------------|:-----------------------|:-----------------------|
| `<-` | **Tilordning** (Assignment). Setter verdien til variabelnavnet. | **Anbefalt** for generell tilordning da den er den mest idiomatiske R-operatoren. |
| `=` | **Tilordning** (Assignment) / **Argumentnavn** (Named Argument). | Kan brukes, men er ofte forbeholdt spesifisering av argumenter i funksjonskall (f.eks. `mean(x, na.rm = TRUE)`). |

### Eksempler p친 Variabeltilordning

```{r}
# Tilordne heltall
antall_studenter <- 120

# Tilordne desimaltall (Numeric er standard)
pris_per_enhet <- 99.50

# Tilordne tekst (Character)
valuta <- "NOK"

# For 친 vise verdien i R, kan du bare skrive variabelnavnet i konsollen
antall_studenter
```

## Navngivningskonvensjon i R

God kodenavngivning er essensielt for lesbarhet.

-   **Case-sensitivitet:** R er kasusf칮lsom. Det betyr at `Pris`, `pris` og `PRIS` er tre unike variabler.
-   **Anbefalt stil:** Bruk `snake_case` (sm친 bokstaver med understrek for 친 skille ord) for variabelnavn, f.eks. `brutto_nasjonalprodukt`.
-   **Regler:** Variabelnavn kan ikke starte med et tall og kan ikke inneholde spesialtegn (unntatt understrek `_`).

## 2. Datatyper i R

R har flere innebygde datatyper. De mest grunnleggende inkluderer:

| Datatype | Beskrivelse | Eksempel | Python Ekvivalent |
|:-----------------|:-----------------|:-----------------|:-----------------|
| **Numeric** | Standard for alle tall, inkludert desimaltall (flytpunktstall). | `42`, `3.14` | `float` |
| **Integer** | Heltall. **M친** tvinges eksplisitt ved 친 legge til `L`. | `42L`, `1000L` | `int` |
| **Character** | Tekststrenger. | `"Hei, verden!"`, `"NOK"` | `str` |
| **Logical** | Boolsk verdi. Representerer sannhetstilstander. | `TRUE`, `FALSE` | `bool` |

### Sjekke Datatyper

Du kan bruke funksjonen `typeof()` for 친 sjekke datatypen til en variabel.

```{r}
# Eksempler p친 datatyper
x <- 42
y <- "R er g칮y!"
z <- TRUE

typeof(x)  # "double" (Numeric)
typeof(y)  # "character"
typeof(z)  # "logical"
```

Alternativt, kan du bruke funksjonen `class()` for 친 f친 klassen til et objekt.

```{r}
class(x)  # "numeric"
class(y)  # "character"
class(z)  # "logical"
```

## Spesielle verdier (Missing data)

I R representeres manglende data med `NA` (Not Available). Dette er viktig 친 h친ndtere i dataanalyse.

```{r}
# Eksempel p친 manglende verdi
hoyde <- c(170, 180, NA, 175)
mean(hoyde)  # Returnerer NA
mean(hoyde, na.rm = TRUE)  # Fjerner NA og beregner gjennomsnittet
```

## 3. Grunnleggende Operasjoner

R st칮tter en rekke grunnleggende aritmetiske og logiske operasjoner. 

| Operator | Beskrivelse | Eksempel |
|:---|:---|:---|
| `+` | **Addisjon**. | `5 + 3` |
| `-` | **Subtraksjon**. | `5 - 3` |
| `*` | **Multiplikasjon**. | `5 * 3` |
| `/` | **Divisjon**. | `5 / 3` |
| `^` eller `**` | **Eksponentiering** (Potens). | `5 ^ 3` (5 opph칮yd i 3) |
| `%%` | **Modulo**. Gir resten ved divisjon. | `5 %% 2` (gir 1) |

## Eksempel: Finansregning - Sluttverdi

Vi bruker R til 친 beregne sluttverdien av en investering med rentes rente. Det kan representeres med det matematiske uttrykket: \[ K_t = K_0 \times (1 + r)\^t \] hvor - ( K_t ) er sluttverdien etter tid ( t ), - ( K_0 ) er startkapitalen, - ( r ) er den 친rlige renten (i desimalform), - ( t ) er antall 친r.

```{r}
# Parametere
K0 <- 10000  # Startkapital
r <- 0.05    # 칀rlig rente (5%)
t <- 15      # 친r

# Beregning av sluttverdi
Kt <- K0 * (1 + r)^t

# round() brukes for 친 formatere resultatet til to desimaler
cat("Sluttverdien etter 15 친r er:", round(Kt, 2), "kr")
```

### Konvertering av datatyper (Type Coercion)

Noen ganger m친 du eksplisitt konvertere mellom datatyper. R tilbyr flere funksjoner for dette: 
For 친 endre datatypen til en variabel (**Type Coercion**), bruker vi standardiserte funksjoner som starter med `as.`:

| Funksjon | Beskrivelse | Eksempel |
|:---|:---|:---|
| `as.numeric()` | Konverterer til **numerisk** type (`float`/desimaltall). Dette er den vanligste konverteringen fra tekst til tall. | `as.numeric("42")` |
| `as.integer()` | Konverterer til **heltall** (`integer`). **OBS:** R kutter alltid desimalene (trunkerer), runder ikke. | `as.integer(42.9)` (blir `42`) |
| `as.character()` | Konverterer til **tekststreng** (`character`). | `as.character(42)` (blir `"42"`) |
| `as.logical()` | Konverterer til **logisk/boolsk** type. Tall 1 blir `TRUE`, 0 blir `FALSE`. | `as.logical(1)` (gir `TRUE`) |

```{r}
# Eksempel p친 typekonvertering
num_str <- "123.45"
num_val <- as.numeric(num_str)
cat("Den numeriske verdien er:", num_val, "\n")
int_val <- as.integer(num_val)
cat("Den heltallsverdien er:", int_val, "\n")
log_val <- as.logical(1)
cat("Den logiske verdien er:", log_val, "\n")
char_val <- as.character(int_val)
cat("Den tekstlige verdien er:", char_val, "\n")
```

#### Viktig om `as.integer()` (Trunkering) 丘멆잺

N친r du konverterer desimaltall til heltall med `as.integer()`, trunkeres (avrundes ned) verdien. For eksempel, `as.integer(4.9)` blir `4`, ikke `5`. V칝r oppmerksom p친 dette for 친 unng친 uventede resultater.

```{r}
# Eksempel p친 trunkering
trunkert_verdi <- as.integer(4.9)
cat("Trunkert verdi av 4.9 er:", trunkert_verdi, "\n")  # Output: 4

# For 친 runde riktig av kan man gj칮re
avrundet_verdi <- round(4.9)
cat("Avrundet verdi av 4.9 er:", avrundet_verdi, "\n")  # Output: 5
```

## Oppsummering

I dette kapittelet har vi dekket det grunnleggende om variabler, datatyper og operasjoner i R. Du har l칝rt hvordan du tilordner verdier til variabler, sjekker datatyper, utf칮rer grunnleggende aritmetiske operasjoner, og h친ndterer spesielle verdier som `NA`. Vi har ogs친 sett p친 et praktisk eksempel innen finansregning for 친 illustrere hvordan disse konseptene kan anvendes i 칮konomiske sammenhenger. G친 til **Funksjoner** for 친 l칝re hvordan du lager gjenbrukbare kodeblokker for 친 l칮se komplekse 칮konomiske problemstillinger.
